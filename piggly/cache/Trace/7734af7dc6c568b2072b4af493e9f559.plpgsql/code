DECLARE
    have       ALIAS FOR $1;
    want       ALIAS FOR $2;
    have_rec   RECORD;
    want_rec   RECORD;
    have_found BOOLEAN;
    want_found BOOLEAN;
    err_msg    text := 'details not available in pg <= 9.1';
BEGIN
    perform public.piggly_branch($PIGGLY$e36517603f7e7511$PIGGLY$);
    FETCH have INTO have_rec;
    have_found := FOUND;
    FETCH want INTO want_rec;
    want_found := FOUND;
    WHILE public.piggly_cond($PIGGLY$37dde41d61b0121d$PIGGLY$, (have_found OR want_found)) LOOP
        perform public.piggly_branch($PIGGLY$cbd2b956a6893b03$PIGGLY$);
        IF public.piggly_cond($PIGGLY$7a1accfad2dfedb2$PIGGLY$, (have_rec IS DISTINCT FROM want_rec OR have_found <> want_found)) THEN
            perform public.piggly_branch($PIGGLY$c6057461f801b823$PIGGLY$);
            perform public.piggly_branch($PIGGLY$c24b2a11c2c027bf$PIGGLY$);RETURN ok( true, $3 );
        ELSE
            perform public.piggly_branch($PIGGLY$828f881e2d7b8551$PIGGLY$);
            FETCH have INTO have_rec;
            have_found := FOUND;
            FETCH want INTO want_rec;
            want_found := FOUND;
        END IF;
    END LOOP;
    perform public.piggly_branch($PIGGLY$8f5e5a4de303a9ec$PIGGLY$);RETURN ok( false, $3 );
EXCEPTION
    WHEN datatype_mismatch THEN
        perform public.piggly_branch($PIGGLY$76586e5d0cdbff52$PIGGLY$);
        GET STACKED DIAGNOSTICS err_msg = MESSAGE_TEXT;
        perform public.piggly_branch($PIGGLY$3416fa523bb9b05f$PIGGLY$);RETURN ok( false, $3 ) || E'\n' || diag(
            E'    Number of columns or their types differ between the queries' ||
            CASE WHEN have_rec::TEXT = want_rec::text THEN '' ELSE E':\n' ||
                '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || E'\n' ||
                '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
            END || E'\n        ERROR: ' || err_msg
        );
END;